#!/usr/bin/env ruby

require 'optparse'
require 'canvas-blueprint-tool'

options = {}
OptionParser.new do |opts|
  opts.banner = <<-EOBANNER
    Canvas Blueprint Tool
    ====================

    canvas-blueprint-tool --associate --course <course_id> --blueprint <blueprint_id>
    canvas-blueprint-tool --publish --course <course_id>

  EOBANNER

  opts.on("-v", "--version", 
          "Output the gem version") do |version| 
            options[:version] = true
          end
  opts.on("-a", "--associate", 
          "Associate a course with a blueprint. Requires course and blueprint flags") do |associate| 
            options[:associate] = true
          end
  opts.on("-p", "--publish", 
          "Publish a course. Requires course flag") do |publish| 
            options[:publish] = true
          end
  opts.on("-cCOURSE", "--course COURSE", 
          "Provide a course ID. Used for associating and publishing") do |course_id| 
            options[:course_id] = course_id
          end
  opts.on("-bCOURSE", "--blueprint COURSE", 
          "Provide a blueprint course ID. Used for associating a course to a blueprint") do |course_id| 
            options[:blueprint_id] = course_id
          end

end.parse!

if options[:version]
  CanvasBlueprintTool.new(mode: 'version')
  abort
end

if options[:associate]
  if !options[:course_id] || !options[:blueprint_id]
    raise Exception.new "Associate option requires course and blueprint IDs using the --course and --blueprint flags"
    abort
  end
  CanvasBlueprintTool.new(mode: 'associate',  course_id: options[:course_id], blueprint_id: options[:blueprint_id])
  abort
end

if options[:publish]
  if !options[:course_id]
    raise Exception.new "Publish option requires a course ID using the --course flag"
    abort
  end
  CanvasBlueprintTool.new(mode: 'publish',  course_id: options[:course_id])
  abort
end